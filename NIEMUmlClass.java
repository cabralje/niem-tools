
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.nio.file.*;
import java.nio.file.attribute.*;
import javax.xml.bind.*;              // JAXB
import javax.xml.parsers.*;         // DOM
import org.w3c.dom.*;               // DOM
import org.xml.sax.*;               // SAX
import com.opencsv.*;                 // OpenCSV library
//import gov.niem.niem.wantlist._2.*;   // NIEM Wantlist JAXB bindings
class NiemTools extends UmlClass {
  public NiemTools(long id, String n) {
  super(id, n); inherited_opers = null;
  }

  public static void exportCsv() throws IOException
  {
    fw = new FileWriter(directory + "/niem-mapping.csv");
    try {
      CSVWriter writer = new CSVWriter(fw);
  
      // Write header
  
      String[] nextLine = new String[map.length];
      for (int i=0;i<map.length;i++)
        nextLine[i]=map[i][0];
      writer.writeNext(nextLine);
    
      // Export NIEM Mappings for Classes
      for (int i=0; i<classes.size(); i++) {
        UmlItem c = (UmlItem) classes.elementAt(i);
        if (c.stereotype().equals(niemStereotype)) {
          writer.writeNext(itemCsv(c));
    
          // Export NIEM Mapping for Attributes and Relations
          UmlItem[] ch = c.children();
          for (int j=0; j<ch.length; j++) {
            if (ch[j].stereotype().equals(niemStereotype)) {
              nextLine = itemCsv(ch[j]);
              if (nextLine != null)
                writer.writeNext(nextLine);
            }
          }
        }
      }
      writer.close();
    
    } catch (FileNotFoundException e) {
      UmlCom.trace("File not found");
    } catch (IOException e) {
      UmlCom.trace("IO exception");
    }
  }

  public static void exportHtml() throws IOException
  {
    start_file("niem_mapping", "NIEM Mapping", true);
    
    // Write header
    fw.write("<table><tr bgcolor=\"#f0f0f0\">"); 
    for (int i=0;i<map.length;i++)
      fw.write("<td>" + map[i][0] + "</td>");
    fw.write("</tr>\n");
  
    // Show NIEM Mappings for Classes
    for (int i=0; i<classes.size(); i++) {
      UmlItem c = (UmlItem) classes.elementAt(i);
      if (c.stereotype().equals(niemStereotype)) {
        writeLineHtml(c);
  
        // Show NIEM Mapping for Attributes and Relations
        UmlItem[] ch = c.children();
        for (int j=0; j<ch.length; j++) {
          if (ch[j].stereotype().equals(niemStereotype))
            writeLineHtml(ch[j]);
        }
      }
    }
    fw.write("</table>\n");
      
    end_file();
  }

  public static void exportWantlist() throws IOException
  {
  /*
    String wantlistSchema = UmlBasePackage.getProject().propertyValue("wantlist schema");
  
    JFrame frame = new JFrame();
    JFileChooser fc = new JFileChooser(wantlistSchema);
      
    fc.setFileFilter(new FileNameExtensionFilter("XSD file","xsd"));
    fc.setDialogTitle("Wantlist schema");
      
    if (fc.showOpenDialog(frame) != JFileChooser.APPROVE_OPTION)
      throw new RuntimeException("abort");
      
    wantlistSchema = fc.getSelectedFile().getAbsolutePath();
    UmlBasePackage.getProject().set_PropertyValue("wantlist schema",wantlistSchema);
  
    Wantlist wantlist = new Wantlist();
   
    // Export schema
  //  fw = new FileWriter(directory + "/wantlist.xml");
  //  fw.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
  //  fw.write("<!-- NIEM Wantlist generated by BOUML2NIEM plug_out -->\n");
  //  fw.write("<w:WantList w:release=\"3.1\" w:product=\"NIEM\" w:nillableDefault=\"true\" xmlns:w=\"http://niem.gov/niem/wantlist/2.2\" xmlns:j=\"http://release.niem.gov/niem/domains/jxdm/5.1/\" xmlns:nc=\"http://release.niem.gov/niem/niem-core/3.0/\">\n");
  */
  
  /*
    String tn = niemStereotype+":Type";
    String pn = niemStereotype+":Property";
    String bn = niemStereotype+":BaseType";
    String mn = niemStereotype+":Multiplicity";
    String t, p, m, b, minoccurs, maxoccurs;
  
    // Iterate over all items with NIEM stereotype to export elements
    for (int i=0; i < all.size() ; i++) {
      UmlItem c = (UmlItem) all.elementAt(i);
      if (c.stereotype().equals(niemStereotype)) {
        p = c.propertyValue(pn);
        if (!p.equals("")) 
          if (isNiemSchema(getSchema(p)))
            // fw.write("<w:Element w:name=\"" + p + "\" w:isReference=\"false\" w:nillable=\"false\"/>\n");
      }
    }
  
    // Iterate over all items with NIEM stereotype to export types
    for (int i=0; i < all.size() ; i++) {
      UmlItem c = (UmlItem) all.elementAt(i);
      if (c.stereotype().equals(niemStereotype)) {
        t = c.propertyValue(tn);
        p = c.propertyValue(pn);
        b = c.propertyValue(bn);
        m = c.propertyValue(mn);
        if (p.equals("")) {
  
          // NIEM Type Mapping
          if (isNiemSchema(getSchema(t))) {
  
            // Export NIEM Types  
            // fw.write("<w:Type w:name=\"" + t + "\" w:isRequested=\"true\"/>\n");
  
          } else {
  
            if (isNiemSchema(getSchema(b))) {
  
              // Export NIEM Base Types for Non-NIEM Types
              // fw.write("<w:Type w:name=\"" + b + "\" w:isRequested=\"true\"/>\n");
            }
          }
        } else {
  
          // NIEM Element in Type Mapping
          if (isNiemSchema(getSchema(t))) {
  
            // Export NIEM Types  
            //fw.write("<w:Type w:name=\"" + t + "\" w:isRequested=\"true\">\n");
  
            if (isNiemSchema(getSchema(p))) {
  
              // Export Element in Type
              if (m.contains(",")) {
                String[] occurs = m.split(",");
                minoccurs = occurs[0];
                maxoccurs = occurs[1];
              } else { 
                minoccurs = m;
                maxoccurs = m;
              }
              //fw.write("\t<w:ElementInType w:name=\"" + p + "\" w:isReference=\"false\" w:minOccurs=\"" + minoccurs + "\" w:maxOccurs=\"" + maxoccurs + "\"/>\n");
              //fw.write("</w:Type>");
   
           } else {
              //fw.write("</w:Type>");
              if (isNiemSchema(getSchema(b))) {
  
                // Export NIEM Base Types for Non-NIEM Properties
                //fw.write("<w:Type w:name=\"" + b + "\" w:isRequested=\"true\"/>\n");
              }
            }
           }
        }
      }
    }
    //fw.write("</w:WantList>");
    //fw.close();
  */
  
  /*
    // Create Java content
    //Country spain = new Country();
    //spain.setName( "Spain" );
    //spain.setCapital( "Madrid" );
    //spain.setFoundation( LocalDate.of( 1469, 10, 19 ) );
    //spain.setImportance( 1 );
  
    // Create schema
    SchemaFactory sf = SchemaFactory.newInstance( XMLConstants.W3C_XML_SCHEMA_NS_URI );
    Schema schema = sf.newSchema( new File( wantlistSchema ) );
  
    // Initialize validator
    Validator validator = schema.newValidator();
    validator.setErrorHandler( new MyErrorHandler() );
  
    // Validate instance
    try {
      validator.validate( wantlist );
    }
    catch (ParserConfigurationException e) { 
      UmlCom.trace("ParserConfigurationException");
    } 
    catch (SAXException e) { 
  //    e.printStackTrace();
      UmlCom.trace("SAXException");
    }
    catch (IOException ed) {
      UmlCom.trace("IOException");
    }
  
    // Create JAXB instance
    JAXBContext jaxbContext = JAXBContext.newInstance( Wantlist.class );
    JAXBSource sourceWantlist = new JAXBSource( jaxbContext, wantlist );
  
    // Create JAXB marshaller
    Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
    jaxbMarshaller.setProperty( Marshaller.JAXB_FORMATTED_OUTPUT, true );
  
    // Marshall Java ojects in XML
    jaxbMarshaller.marshal( wantlist, new File(directory + "wantlist.xml") );
    jaxbMarshaller.marshal( wantlist, System.out );
  */
  }

  public static String getSchema(String typeName)
  {
    int i = typeName.indexOf(":");
    return (i>=0) ? typeName.substring(0,i) : "";
    
  }

  public static void importCsv() throws IOException
  {
    JFrame frame = new JFrame();
    JFileChooser fc = new JFileChooser(directory);
    fc.setFileFilter(new FileNameExtensionFilter("CSV file","csv"));
    fc.setDialogTitle("NIEM Mapping CSV file");
      
    if (fc.showOpenDialog(frame) != JFileChooser.APPROVE_OPTION)
      throw new RuntimeException("abort");
      
    String filename = fc.getSelectedFile().getAbsolutePath();
    try {
      CSVReader reader = new CSVReader(new FileReader(filename));
      String[] nextLine;
  
      // Read header
      reader.readNext();
  
      // NIEM Read Mappings
      while ((nextLine = reader.readNext()) != null) {
  
        String className = nextLine[0].trim();
        String attributeName = nextLine[1].trim();
        for (int i=0;i<classes.size();i++) {
          UmlItem c = (UmlItem) classes.elementAt(i);
          if (c.stereotype().equals(niemStereotype) && (c.pretty_name().equals(className))) {
  
            if (attributeName.equals("")) {
  
              // Import NIEM Mapping to Class
              UmlCom.trace("Importing NIEM mapping for " + className);
              for (int p=4; p<map.length && p<nextLine.length; p++) {
                  c.set_PropertyValue(niemProperty(p),nextLine[p]);
              }
              break;
  
            } else {
  
              UmlItem[] ch = c.children();
              for (UmlItem item: ch) {
                if (item.stereotype().equals(niemStereotype) && (item.pretty_name().equals(attributeName))) {
                  // Import NIEM Mapping to Attribute
                  for (int p=4; p<map.length && p<nextLine.length; p++) {
                    item.set_PropertyValue(niemProperty(p),nextLine[p]);
                  }
                  break;
                }
              }
            }
          }
        }
      }
      reader.close();
  
    } catch (FileNotFoundException e) {
      UmlCom.trace("File not found");
    } catch (IOException e) {
      UmlCom.trace("IO exception");
    }
  
  
  
    
  }

  public static void importSchema(String filename) throws IOException
  {
    //DOM parser
    try { 
      // parse the schema
      DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc = docBuilder.parse (new File(filename)); 
      NodeList list;
      org.w3c.dom.Element e, an, cc, ex;
      String en, et, ed, bt;
      // parse the elements
      list = doc.getElementsByTagName("xs:element"); 
      for(int i = 0 ; i < list.getLength(); i++) {
        e = (org.w3c.dom.Element)list.item(i);
        if (e.hasAttributes()) {
          en = e.getAttribute("name"); 
          et = e.getAttribute("type"); 
          an = (org.w3c.dom.Element)e.getElementsByTagName("xs:annotation").item(0);
          ed = an.getElementsByTagName("xs:documentation").item(0).getTextContent();
   //       UmlCom.trace("Element " + en + " (" + et + ") - " + ed ); 
        }
      }
  
      // parse the types
      list = doc.getElementsByTagName("xs:complexType"); 
      for(int i = 0 ; i < list.getLength(); i++) {
        e = (org.w3c.dom.Element)list.item(i);
        if (e.hasAttributes()) {
          en = e.getAttribute("name"); 
          an = (org.w3c.dom.Element)e.getElementsByTagName("xs:annotation").item(0);
          ed = an.getElementsByTagName("xs:documentation").item(0).getTextContent();
          cc = (org.w3c.dom.Element)e.getElementsByTagName("xs:complexContent").item(0);
          ex = (org.w3c.dom.Element)cc.getElementsByTagName("xs:extension").item(0);
          bt = ex.getAttribute("base"); 
          UmlCom.trace("Type " + en + " (" + bt + ") - " + ed ); 
        }
      }
    } 
    catch (ParserConfigurationException e) { 
      UmlCom.trace("ParserConfigurationException");
    } 
    catch (SAXException e) { 
      UmlCom.trace("SAXException");
    }
    catch (IOException ed) {
      UmlCom.trace("IOException");
    }
  
  }

  public static void importSchemaDir() throws IOException
  {
    directory = UmlBasePackage.getProject().propertyValue("niem dir");
      
    // in java it is very complicated to select
    // a directory through a dialog, and the dialog
    // is very slow and ugly
    JFrame frame = new JFrame();
    JFileChooser fc = new JFileChooser(directory);
      
    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    fc.setDialogTitle("Directory of the schema to be imported");
      
    if (fc.showOpenDialog(frame) != JFileChooser.APPROVE_OPTION)
      throw new RuntimeException("abort");
      
    directory = fc.getSelectedFile().getAbsolutePath();
    UmlBasePackage.getProject().set_PropertyValue("niem dir",directory);
  
    // Walk directory
    Files.walkFileTree(FileSystems.getDefault().getPath(directory), new SimpleFileVisitor<Path>() {
  
      @Override
      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        String filename = file.toString();
        if (filename.endsWith(".xsd")) {
          // List schema files
          importSchema(filename);
        }
        return FileVisitResult.CONTINUE;
      }
      
      @Override
      public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException {
        if (e == null) {
          return FileVisitResult.CONTINUE;
        } else {
          // directory iteration failed
          throw e;
        }
      }
    });
  
  }

  public static boolean isNiemSchema(String schema)
  {
  return Arrays.asList(niemSchema).contains(schema);
  }

  public static String niemProperty(int p)
  {
  return niemStereotype + ":" + map[p][1];
  }

  public static void writeLineHtml(UmlItem item) throws IOException
  {
    // Export Class, Property and Multiplicity
    switch (item.kind().value()) {
      case anItemKind._aClass:
        {
          fw.write("<tr bgcolor=\"#f0f0f0\"><td>");
          item.write();
          fw.write("</td><td>");
          fw.write("</td><td>");
        }
        break;
      case anItemKind._anAttribute: {
          fw.write("<tr><td>");
          item.parent().write();
          fw.write("</td><td>");
  	  item.write();
          fw.write("</td><td>");
          UmlAttribute a = (UmlAttribute) item;
          fw.write(a.multiplicity());
        }
        break;
      case anItemKind._aRelation:
        {
          UmlRelation rel = (UmlRelation) item;
          if ((rel.relationKind() == aRelationKind.aGeneralisation) ||
              (rel.relationKind() == aRelationKind.aRealization))
	    return;
          else {
            fw.write("<tr><td>");
            item.parent().write();
            fw.write("</td><td>");
  	    item.write();
            fw.write("</td><td>");
            fw.write(rel.multiplicity());
          }
        }
        break;
      default:
        return;
    }
    fw.write("</td><td>");

    // Export Description
    fw.write(item.description());
    fw.write("</td>");
    
    // Export NIEM Mapping
    int p;
    if (item.stereotype().equals(niemStereotype)) {
      String schema = getSchema((String)(item.propertyValue(niemStereotype+":Type")));
      for (p=4;p<map.length;p++) {
        if (map[p][2].equals(""))
          fw.write(columnHtml((String)(item.propertyValue(niemProperty(p))),null,schema));
        else
          fw.write(columnHtml((String)(item.propertyValue(niemProperty(p))),(String)(item.propertyValue(niemStereotype+":"+map[p][2])),schema));
      }
    } else {
      for (p=3;p<(map.length);p++)
        fw.write("<td></td>");
    }
    fw.write("</tr>");
  
  }

  protected static String columnHtml(String newValue, String oldValue, String schema) throws IOException
  {
    if (newValue != null)
      newValue = newValue.trim();
    if (oldValue != null)
      oldValue = oldValue.trim();
    if (schema !=null) 
      schema = schema.trim();
    String bgcolor = ((schema != null) && (!schema.equals("")) && (!isNiemSchema(schema))) ?  "#ffd700" : "#ffffff";
    String fgcolor = ((oldValue != null) && (!oldValue.equals(newValue))) ? "#ff0000" : "#000000";
    return "<td bgcolor=\"" + bgcolor +"\"><font color = \"" + fgcolor +"\">" + newValue + "</font></td>";
  }

  public static final String[][] map = {{"Model Class","",""},
 {"Model Attribute","",""},
 {"Model Multiplicity","",""},
 {"Model Definition","",""},
 {"NIEM XPath","XPath","OldXPath"},
 {"NIEM Type","Type",""},
 {"NIEM Property","Property",""},
 {"NIEM Base Type","BaseType",""},
 {"NIEM Multiplicity","Multiplicity","OldMultiplicity"},
 {"Old XPath","OldXPath",""},
 {"Old Multiplcity","OldMultiplicity",""},
 {"NIEM Mapping Notes","Notes",""}};

  protected static final String[] niemSchema = {"nc","j"};

  protected static final String niemStereotype = "niem-profile:niem";

  public static void deleteMapping()
  {
    Iterator<UmlItem> it = all.iterator();
    while (it.hasNext()) {
      UmlItem item = it.next();
      if (item.stereotype().equals(niemStereotype))
        for (int p=4;p<map.length;p++)
          item.set_PropertyValue(niemProperty(p),"");
    }
        
    
  }

  public static String[] itemCsv(UmlItem item) throws IOException
  {
   String[] nextLine = new String[map.length];

    // Export Class and Property
    switch (item.kind().value()) {
      case anItemKind._aClass:
        nextLine[0]=item.pretty_name();
	nextLine[1]="";
        break;
      default:
        nextLine[0]=item.parent().pretty_name();
        nextLine[1]=item.pretty_name();
        break;
    }
  
    // Export Multiplicity
    switch (item.kind().value()) {
      case anItemKind._aClass: 
        nextLine[2]="";
        break;
      case anItemKind._aRelation:
        UmlRelation rel = (UmlRelation) item;
        if ((rel.relationKind() == aRelationKind.aGeneralisation) ||
            (rel.relationKind() == aRelationKind.aRealization))
	  return null;
	nextLine[2]=rel.multiplicity();
        break;
      case anItemKind._anAttribute:
        UmlAttribute a = (UmlAttribute) item;
        nextLine[2]=a.multiplicity();
        break;
      default:
          return null;
    }

    // Export Description
    nextLine[3]=item.description();

    // Export NIEM Mapping
    if (item.stereotype().equals(niemStereotype)) {
      String schema = getSchema((String)(item.propertyValue(niemStereotype+":Type")));
      for (int p=4;p<map.length;p++)
        nextLine[p]=item.propertyValue(niemProperty(p));
    }
    return nextLine;
  }

  public static void resetStereotype()
  {
   Iterator it=all.iterator();
   while (it.hasNext()) {
     UmlItem item = (UmlItem)it.next();
     if (item.stereotype().equals("niem:niem")) {
       item.set_Stereotype(niemStereotype);
       item.applyStereotype();
     }
   }
  }

}
